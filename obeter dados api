{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Descrição do Notebook\n",
    "\n",
    "Este notebook realiza a **extração de dados** de uma API pública (Pokémon API) para obter informações sobre diferentes Pokémons, como **Charmander**, **Charmeleon** e **Charizard**. Os dados extraídos incluem informações como:\n",
    "\n",
    "- **Experiência base** (base experience)\n",
    "- **Altura** (height)\n",
    "- **Peso** (weight)\n",
    "- **ID do Pokémon** (ID)\n",
    "\n",
    "Esses dados são então estruturados e exibidos em **tabelas separadas** usando o **pandas DataFrame**. Além disso, o código inclui uma função de **alerta** para notificar o usuário caso ocorra algum erro ao tentar acessar a API.\n",
    "\n",
    "O notebook também utiliza a função `display()` para mostrar as tabelas de forma organizada em um ambiente interativo.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Tabela Charmander:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nome</th>\n",
       "      <th>Base Experience</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Charmander</td>\n",
       "      <td>62</td>\n",
       "      <td>6</td>\n",
       "      <td>85</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Nome  Base Experience  Height  Weight  ID\n",
       "0  Charmander               62       6      85   4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Tabela Charmeleon:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nome</th>\n",
       "      <th>Base Experience</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Charmeleon</td>\n",
       "      <td>142</td>\n",
       "      <td>11</td>\n",
       "      <td>190</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Nome  Base Experience  Height  Weight  ID\n",
       "0  Charmeleon              142      11     190   5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Tabela Charizard:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nome</th>\n",
       "      <th>Base Experience</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Charizard</td>\n",
       "      <td>267</td>\n",
       "      <td>17</td>\n",
       "      <td>905</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Nome  Base Experience  Height  Weight  ID\n",
       "0  Charizard              267      17     905   6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "# Função de alerta (simulando a função 'alerta' que seria dada na aula de Fundamentos de Programação III)\n",
    "def alerta(mensagem):\n",
    "    display(f\"Alerta: {mensagem}\")\n",
    "\n",
    "# Função para fazer a requisição e retornar os dados\n",
    "def obter_dados(url):\n",
    "    response = requests.get(url)  # Requisição GET à URL\n",
    "    if response.status_code == 200:  # Verifica se deu certo (código 200)\n",
    "        return response.json()  # Retorna os dados em formato JSON\n",
    "    else:\n",
    "        alerta(\"Erro ao acessar a API\")  # Chama a função alerta() caso haja erro\n",
    "        return None  # Retorna None se der erro\n",
    "\n",
    "# URLs dos Pokémons\n",
    "url_charmander = 'https://pokeapi.co/api/v2/pokemon/charmander'\n",
    "url_charmeleon = 'https://pokeapi.co/api/v2/pokemon/charmeleon'\n",
    "url_charizard = 'https://pokeapi.co/api/v2/pokemon/charizard'\n",
    "\n",
    "# Etapa 1: Obter os dados dos Pokémons\n",
    "dados_charmander = obter_dados(url_charmander)\n",
    "dados_charmeleon = obter_dados(url_charmeleon)\n",
    "dados_charizard = obter_dados(url_charizard)\n",
    "\n",
    "# Etapa 2: Função para criar DataFrame a partir dos dados dos Pokémons\n",
    "def criar_dataframe(dados, nome_pokemon):\n",
    "    if dados:\n",
    "        # Extrair informações principais (exemplo: nome, peso, altura, etc.)\n",
    "        info = {\n",
    "            'Nome': nome_pokemon,\n",
    "            'Base Experience': dados.get('base_experience'),\n",
    "            'Height': dados.get('height'),\n",
    "            'Weight': dados.get('weight'),\n",
    "            'ID': dados.get('id'),\n",
    "        }\n",
    "        return pd.DataFrame([info])  # Retorna o DataFrame\n",
    "    return None\n",
    "\n",
    "# Etapa 3: Criar DataFrames para cada Pokémon\n",
    "df_charmander = criar_dataframe(dados_charmander, 'Charmander')\n",
    "df_charmeleon = criar_dataframe(dados_charmeleon, 'Charmeleon')\n",
    "df_charizard = criar_dataframe(dados_charizard, 'Charizard')\n",
    "\n",
    "display(\"Tabela Charmander:\")\n",
    "display(df_charmander)\n",
    "\n",
    "display(\"Tabela Charmeleon:\")\n",
    "display(df_charmeleon)\n",
    "\n",
    "display(\"Tabela Charizard:\")\n",
    "display(df_charizard)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
